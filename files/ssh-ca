#!/bin/bash
#
# ssh-ca

. /etc/ssh-ca.conf

run_id="$(uuid)"
user_id="${SUDO_USER:-$USER}"

function log_debug() {
    echo "$(date "+%F %T") ${run_id} ${*}" >> /var/log/ssh-ca/debug.log
}

function log_output() {
    log_debug "CALL ${*}"
    output="$("${@}" 2>&1)"
    rc=$?
    log_debug "RETURN ${rc}"
    log_debug "OUTPUT ${output}"
    return ${rc}
}

function log_certificate() {
    cat "${cert}" >> /var/log/ssh-ca/certificates.log
}

function sign_key() {
    # Files and IO related variables
    mkdir -p /tmp/ssh-ca
    pubkey="/tmp/ssh-ca/${run_id}.pub"
    cert="/tmp/ssh-ca/${run_id}-cert.pub"

    # Expect a public key on stdin
    dd bs=1K count=10 of="${pubkey}" 2>/dev/null
    log_output ssh-keygen -l -f "${pubkey}"
    rc=$?
    if [ ${rc} -gt 0 ]; then
        echo ERROR: input is not a well-formed SSH public key
        rm "${pubkey}"
        exit ${rc}
    fi

    # Certificate signature parameters
    ca_key="/usr/local/lib/ssh-ca/${SSH_CA_KEY}"
    serial="$(date +%s)"
    principals="${arguments[1]}"
    if [ "${arguments[0]}" = "user" ]; then
        validity="${SSH_CA_CERTIFICATE_VALIDITY}"
        options="${SSH_CA_CERTIFICATE_OPTIONS}"
        host_cert=""
    else
        validity="+365d"
        options=""
        host_cert="-h"
    fi

    # Validation
    if [ -z "${principals}" ]; then
        log_debug "ERROR: Empty PRINCIPALS parameter"
        echo "ERROR: The PRINCIPALS parameter cannot be empty"
        exit 1
    fi

    # Actual signature happens here
    log_output ssh-keygen \
        -P "" \
        -s "/usr/local/lib/ssh-ca/${SSH_CA_KEY}" \
        ${host_cert} \
        -I "${user_id}" \
        -V "${validity}"${options} \
        -n "${principals}" \
        -z "${serial}" \
        "${pubkey}"
    rc=$?

    # Cleanup
    rm "${pubkey}"
    if [ ${rc} -eq 0 ]; then
        log_certificate
        cat "${cert}"
        rm "${cert}"
    else
        echo "ERROR: no certificate was produced"
        echo "See the debug log on the CA server for more details"
        exit ${rc}
    fi
}

log_debug "SSH_ORIGINAL_COMMAND ${SSH_ORIGINAL_COMMAND}"
read -a arguments <<< "${SSH_ORIGINAL_COMMAND}"
case "${arguments[0]}" in
    user|host)
        sign_key "${subcommand}"
        ;;
    report)
        cat "/var/log/ssh-ca/certificates.log"
        ;;
    *)
        echo Usage:
        echo "    host PRINCIPALS"
        echo "                     Sign a host certificate"
        echo "    user PRINCIPALS"
        echo "                     Sign a user certificate"
        echo "    PRINCIPALS is a mandatory comma-separated list of principals"
        echo "               to include in the signed certificate"
        echo "    report"
        echo "            Print the list of all certificates ever signed"
        echo "            Example report details on the last 10 certificates:"
        echo "            $ ssh ssh-ca report | ssh-keygen -L -f <(tail)"
        echo ""
        echo "COMMAND=$SSH_ORIGINAL_COMMAND"
        echo "USER=$user_id"
        echo "SSH_CA_KEY=$SSH_CA_KEY"
        echo "SSH_CA_CERTIFICATE_VALIDITY=$SSH_CA_CERTIFICATE_VALIDITY"
        echo "SSH_CA_CERTIFICATE_OPTIONS=$SSH_CA_CERTIFICATE_OPTIONS"
        ;;
esac
